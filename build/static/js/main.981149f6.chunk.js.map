{"version":3,"sources":["components/Header.js","context/CategoriasContext.js","context/RecetasContext.js","components/Formulario.js","context/ModalContext.js","components/Receta.js","components/ListaRecetas.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","CategoriasContext","createContext","CategoriasProvider","props","useState","categorias","guardarCategorias","useEffect","a","async","axios","get","data","drinks","obtenerCategorias","Provider","value","children","RecetasContext","RecetasProvider","recetas","guardarRecetas","nombre","categoria","busqueda","buscarRecetas","consultar","guardarConsultar","url","resultado","obtenerRecetas","Formulario","guardarBusqueda","useContext","obtenerDatosReceta","e","target","name","onSubmit","preventDefault","type","placeholder","onChange","map","key","strCategory","ModalContext","ModalProvider","idreceta","guardarIdReceta","informacion","guardarReceta","obtenerReceta","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","boxShadow","shadows","padding","spacing","Receta","receta","modalStyle","open","setOpen","classes","console","log","strDrink","src","strDrinkThumb","alt","onClick","idDrink","Modal","onClose","style","strInstructions","ingredientes","i","push","mostrarIngredientes","ListaRecetas","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.981149f6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"bg-alert\">\r\n            <h1>Busca Recetas de Bebidas</h1>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React, { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\n//Crear el context\r\nexport const CategoriasContext = createContext();\r\n\r\n//Crear Provider. Es donde se encuentran las funciones y state\r\n\r\nconst CategoriasProvider = (props) => \r\n{\r\n        //Crear State del Context\r\n        const [categorias, guardarCategorias] = useState([]);\r\n\r\n        //ejecutar el llamado a la API\r\n        useEffect( () => {\r\n            const obtenerCategorias = async () => {\r\n                const url='https://www.thecocktaildb.com/api/json/v1/1/list.php?c=list';\r\n                const categorias = await axios.get(url);\r\n\r\n                guardarCategorias(categorias.data.drinks);\r\n            }\r\n            obtenerCategorias();\r\n        }, []);\r\n\r\n        return (\r\n            <CategoriasContext.Provider\r\n                value={{\r\n                    categorias\r\n                }}\r\n            >\r\n                {props.children}\r\n            </CategoriasContext.Provider>\r\n        )\r\n}\r\n\r\nexport default CategoriasProvider;","import React, { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const RecetasContext = createContext();\r\n\r\nconst RecetasProvider = (props) => \r\n{\r\n    const [recetas, guardarRecetas] = useState([]);\r\n    const [busqueda, buscarRecetas] = useState({\r\n        nombre: '',\r\n        categoria: ''\r\n    });\r\n    \r\n    const [consultar, guardarConsultar] = useState(false);\r\n\r\n    const { nombre, categoria } = busqueda;\r\n\r\n    useEffect(() => {\r\n        if(consultar)\r\n        {\r\n            const obtenerRecetas = async () =>\r\n            {\r\n                    const url = `https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=${nombre}&c=${categoria}`;\r\n                    const resultado = await axios.get(url);\r\n                    guardarRecetas(resultado.data.drinks);\r\n                   \r\n                    // console.log(resultado.data.drinks);\r\n                }\r\n            obtenerRecetas();\r\n        }\r\n       \r\n    },[busqueda])\r\n\r\n\r\n    return (\r\n        <RecetasContext.Provider\r\n            value={{\r\n                recetas, buscarRecetas, guardarConsultar\r\n            }}\r\n\r\n        >\r\n            {props.children}\r\n        </RecetasContext.Provider>\r\n    );\r\n}\r\n\r\nexport default RecetasProvider;","import React, { useContext, useState } from 'react';\r\nimport { CategoriasContext } from '../context/CategoriasContext';\r\nimport { RecetasContext } from '../context/RecetasContext';\r\n\r\n\r\nconst Formulario = () => {\r\n\r\n    //State local de formulario.js\r\n    const [busqueda, guardarBusqueda] = useState({\r\n        nombre: '',\r\n        categoria: ''\r\n    })\r\n    const { categorias } = useContext(CategoriasContext);\r\n    const { buscarRecetas, guardarConsultar } = useContext(RecetasContext);\r\n\r\n    //funcion para leer los contenidos\r\n\r\n    const obtenerDatosReceta = e => {\r\n        guardarBusqueda({\r\n            ...busqueda,\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n    \r\n    return (\r\n        <form \r\n            className=\"col-12\"\r\n            onSubmit={e => {\r\n                e.preventDefault();\r\n                buscarRecetas(busqueda);\r\n                guardarConsultar(true);\r\n            }}\r\n        >\r\n                    <fieldset className=\"text-center\">\r\n                            <legend>Busca bebidas por categoria o ingredientes</legend>\r\n                    </fieldset>\r\n\r\n                    <div className=\"row mt-4\">\r\n                        <div className=\"col-md-4\">\r\n                            <input\r\n                                name=\"nombre\"\r\n                                className=\"form-control\"\r\n                                type=\"text\"\r\n                                placeholder=\"Busca por Ingrediente\"\r\n                                onChange={obtenerDatosReceta}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-md-4\">\r\n                            <select \r\n                                className=\"form-control\"\r\n                                name=\"categoria\"\r\n                                onChange={obtenerDatosReceta}\r\n                            >\r\n                            <option value=\"\">--Selecciona Categoría--</option>\r\n                            {categorias.map(categoria => (\r\n                                <option \r\n                                    key={categoria.strCategory}\r\n                                    value={categoria.strCategory}\r\n                                >{categoria.strCategory}</option>\r\n                            ))}\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"col-md-4\">\r\n                            <input\r\n                                type=\"submit\"\r\n                                className=\"btn btn-block btn-primary\"\r\n                                value=\"Buscar Bebidas\"\r\n                            />\r\n                       \r\n\r\n                        </div>\r\n                    </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Formulario;","import React, { createContext, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const ModalContext = createContext();\r\n\r\n\r\n\r\nconst ModalProvider = (props) =>\r\n{\r\n    const [idreceta, guardarIdReceta ] = useState(null);\r\n    const [informacion, guardarReceta] = useState({});\r\n\r\n    //Llamar la API una vez que tenemos el ID\r\n    useEffect( () => {\r\n        const obtenerReceta = async () => {\r\n            if(!idreceta) return ;\r\n\r\n            const url = `https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${idreceta}`;\r\n            \r\n            const resultado = await axios.get(url);\r\n\r\n            guardarReceta(resultado.data.drinks[0]);\r\n        }\r\n        obtenerReceta();\r\n    },[idreceta])\r\n\r\n\r\n    return (\r\n        <ModalContext.Provider\r\n            value={{\r\n                informacion,\r\n                guardarIdReceta,\r\n                guardarReceta\r\n            }}\r\n        >\r\n            {props.children}\r\n        </ModalContext.Provider>\r\n    );\r\n}\r\n\r\nexport default ModalProvider;","import React, { useContext, useState } from 'react';\r\nimport { ModalContext } from '../context/ModalContext';\r\n\r\nimport Modal from '@material-ui/core/Modal';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nfunction getModalStyle() {\r\n    const top = 50 ;\r\n    const left = 50;\r\n  \r\n    return {\r\n      top: `${top}%`,\r\n      left: `${left}%`,\r\n      transform: `translate(-${top}%, -${left}%)`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n      position: 'absolute',\r\n      width: 350,\r\n      backgroundColor: theme.palette.background.paper,\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(2, 4, 3),\r\n    },\r\n}));\r\n\r\n\r\n\r\nconst Receta = ({receta}) =>\r\n{\r\n\r\n    //configuracion del modal\r\n    const [ modalStyle ] = useState(getModalStyle);\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n\r\n    //extraer los valores del context\r\n    const {informacion, guardarIdReceta, guardarReceta } = useContext(ModalContext);\r\n\r\n    console.log(informacion);\r\n\r\n    //Muestra y formatea los ingredientes\r\n\r\n    const mostrarIngredientes = informacion => \r\n    {\r\n        let ingredientes = [];\r\n\r\n        for(let i = 1; i < 16; i++)\r\n        {\r\n            if( informacion[`strIngredient${i}`] )\r\n            {\r\n                ingredientes.push(\r\n                <li>{ informacion[`strIngredient${i}`] } { informacion[`strMeasure${i}`]  }</li>\r\n                )\r\n            }\r\n        }\r\n        return ingredientes;\r\n    }\r\n\r\n\r\n    return ( \r\n        \r\n        <div className=\"col-md-4 mb-3\">\r\n            <div className=\"card\">\r\n                <h2 className=\"card-header\"> {receta.strDrink}</h2>\r\n\r\n                <img className=\"card-img-top\" src={receta.strDrinkThumb} alt={`Imágen de ${receta.strDrink}`} />\r\n\r\n                <div className=\"card-body\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-block btn-primary\"\r\n                        onClick={() => {\r\n                            guardarIdReceta(receta.idDrink);\r\n                            handleOpen();\r\n                        }}\r\n                    >\r\n                        Ver Receta\r\n                    </button>\r\n\r\n                    <Modal\r\n                        open={open}\r\n                        onClose={() => {\r\n                            guardarIdReceta(null);\r\n                            guardarReceta({});\r\n                            handleClose();\r\n                        }}\r\n                    >\r\n                        <div style={modalStyle} className={classes.paper}>\r\n                            <h2>{informacion.strDrink}</h2>\r\n                            <h3 className=\"mt-4\">Instrucciones</h3>\r\n                            <p>\r\n                                {informacion.strInstructions}\r\n                            </p>\r\n                            <img className=\"img-fluid my-4\" src={informacion.strDrinkThumb}/>\r\n                            <h3> Ingredientes y Cantidades </h3>\r\n                            <ul>\r\n                                    {mostrarIngredientes(informacion)}\r\n                            </ul>\r\n                        </div>\r\n                    </Modal>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n        );\r\n}\r\n\r\nexport default Receta;","import React, {useContext} from 'react';\r\nimport {RecetasContext} from '../context/RecetasContext';\r\nimport Receta from './Receta';\r\n\r\nconst ListaRecetas = () => {\r\n    \r\n    const {recetas} = useContext(RecetasContext);\r\n    \r\n    return (\r\n        \r\n            <div className=\"row mt-5\">\r\n                    {recetas.map(receta => (\r\n                        <Receta\r\n                            key={receta.idDrink}\r\n                            receta={receta}\r\n                        />\r\n                    ))}\r\n            </div>\r\n        \r\n        );\r\n}\r\n\r\nexport default ListaRecetas;","import React, { Fragment } from 'react';\n\nimport Header from './components/Header';\nimport Formulario from './components/Formulario';\nimport ListaRecetas from './components/ListaRecetas';\n\nimport CategoriasProvider from './context/CategoriasContext';\nimport RecetasProvider from './context/RecetasContext';\nimport ModalProvider from './context/ModalContext';\n\n\nfunction App() {\n  return (\n    <CategoriasProvider>\n      <RecetasProvider>  \n        <ModalProvider>        \n           \n              <Header />\n              <div className=\"container mt-5\">\n                <div className=\"row\">\n                  <Formulario />\n                </div>\n                  <ListaRecetas />\n              </div>     \n\n        </ModalProvider>      \n      </RecetasProvider>\n    </CategoriasProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}